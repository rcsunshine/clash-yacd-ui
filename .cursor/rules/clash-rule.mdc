---
description: 
globs: 
alwaysApply: true
---
# Clash YACD UI - Optimized Cursor Rules

## 项目概述
基于 React + TypeScript 的现代化 Clash Dashboard，采用模块化架构和组件化设计。

## 核心架构原则

### 1. 样式架构 - 分层隔离
```
src/styles/
├── base/           # 基础样式（变量、重置）
├── layout/         # 布局样式（容器、网格）
├── components/     # 通用组件样式
├── pages/          # 页面专用样式
└── theme.scss      # 主题覆盖（仅全局安全样式）
```

**严格规则：**
- 🚫 **禁止使用复杂的 CSS 选择器**（如嵌套 `:not()`, `:has()`）
- ✅ **使用明确的类名作用域**（如 `.dashboard-page`, `.proxy-page`）
- ✅ **页面样式完全隔离**，避免交叉污染
- ✅ **组件样式优先级**：专用 > 页面 > 全局

### 2. 页面标识系统
每个页面必须有唯一的标识类：
```tsx
// 仪表板页面
<div className="page-wrapper dashboard-page">

// 代理页面  
<div className="page-wrapper proxy-page">

// 连接页面
<div className="page-wrapper connections-page">

// 规则页面
<div className="page-wrapper rules-page">
```

### 3. 组件样式优先级
```scss
// ❌ 错误：全局样式影响所有页面
.card { /* 危险的全局样式 */ }

// ✅ 正确：页面作用域样式
.dashboard-page .card { /* 安全的页面样式 */ }

// ✅ 最佳：组件专用样式
.modernProxy { /* 组件自己的样式，不受干扰 */ }
```

## 开发约束

### 1. 样式修改流程
1. **确定作用域**：这个样式应该影响哪些页面？
2. **选择策略**：
   - 单页面 → 使用页面类作用域
   - 多页面 → 使用组件类作用域  
   - 全局 → 必须经过安全性评估
3. **测试验证**：在所有相关页面测试样式效果

### 2. 禁止的做法
```scss
// ❌ 禁止：复杂嵌套选择器
.page-wrapper:not(:has(.connection-table)):not(:has(.modernProxy)) .card

// ❌ 禁止：过度具体化选择器
.page .page-wrapper .container .card .card-body

// ❌ 禁止：无作用域的全局样式
.card { background: red; } /* 会影响所有卡片 */
```

### 3. 推荐的做法
```scss
// ✅ 推荐：明确的页面作用域
.dashboard-page .card { /* 只影响仪表板 */ }

// ✅ 推荐：组件专用样式
.modernProxy { /* 代理组件专用 */ }

// ✅ 推荐：功能性类名
.connection-table-container { /* 明确的功能标识 */ }
```

## 页面特定规则

### 仪表板页面 (Home.tsx)
- **类名**: `.dashboard-page`
- **特色**: 增强卡片样式、悬停效果、渐变背景
- **样式文件**: `src/styles/pages/dashboard.scss`

### 代理页面 (Proxies.tsx)  
- **类名**: `.proxy-page`
- **特色**: 现代代理卡片、流式加载、响应式网格
- **样式文件**: `src/components/proxies/*.module.scss`
- **⚠️ 重要**: 代理页面有完整的组件样式系统，全局样式不应干扰

### 连接页面 (Connections.tsx)
- **类名**: `.connections-page`  
- **特色**: 虚拟滚动表格、实时数据、筛选功能
- **样式文件**: `src/styles/pages/connections.scss`
- **标识符**: `.connection-table-container`

### 规则页面 (Rules.tsx)
- **类名**: `.rules-page`
- **特色**: 虚拟列表、规则提供者、搜索筛选
- **样式文件**: `src/styles/pages/rules.scss`

## 响应式设计标准

### 断点系统
```scss
// 移动端优先设计
@media (min-width: 576px)  { /* 小屏幕 */ }
@media (min-width: 768px)  { /* 平板 */ }
@media (min-width: 992px)  { /* 桌面 */ }
@media (min-width: 1200px) { /* 大桌面 */ }
@media (min-width: 1400px) { /* 超大屏 */ }
@media (min-width: 1920px) { /* 2K 屏 */ }
@media (min-width: 2560px) { /* 4K 屏 */ }
```

### 移动端适配
- **侧边栏**: 768px 以下转为底部导航
- **卡片**: 移动端减少内边距和圆角
- **表格**: 使用水平滚动或卡片布局
- **按钮**: 增大触摸目标（最小 44px）

## 主题系统

### 主题变量规范
```scss
// 颜色系统
--color-text           // 主文本色
--color-text-secondary // 次要文本色  
--color-background     // 主背景色
--color-bg-card        // 卡片背景色
--color-separator      // 分割线色

// 间距系统
--spacing-xs: 0.25rem  // 4px
--spacing-sm: 0.5rem   // 8px  
--spacing-md: 0.75rem  // 12px
--spacing-lg: 1rem     // 16px
--spacing-xl: 1.5rem   // 24px

// 圆角系统
--radius-sm: 4px
--radius-md: 8px
--radius-lg: 12px
--radius-xl: 16px
```

### 主题切换支持
- **深色主题**: `[data-theme='dark']`
- **浅色主题**: `[data-theme='light']`  
- **自动主题**: `[data-theme='auto']` + `@media (prefers-color-scheme)`

## 性能优化规则

### CSS 性能
- **避免深层嵌套**：最多 3 层
- **减少重绘重排**：使用 `transform` 和 `opacity`
- **合理使用 `!important`**：仅在组件隔离时使用

### 组件性能
- **虚拟滚动**：大数据列表必须使用
- **懒加载**：图表和重型组件
- **防抖节流**：搜索和筛选功能

## 代码质量标准

### TypeScript 规范
```tsx
// ✅ 推荐：明确的类型定义
interface PageProps {
  className?: string;
  children: React.ReactNode;
}

// ✅ 推荐：组件 Props 类型
type ProxyCardProps = {
  name: string;
  delay?: number;
  isSelected: boolean;
};
```

### 组件规范
```tsx
// ✅ 推荐：页面组件结构
export default function PageName() {
  return (
    <div className="page-wrapper page-name-page">
      <div className="page-header d-print-none">
        {/* 页面头部 */}
      </div>
      <div className="page-body">
        <div className="container-fluid px-4">
          {/* 页面内容 */}
        </div>
      </div>
    </div>
  );
}
```

## 测试和验证

### 样式修改检查清单
- [ ] 在所有主题下测试（深色/浅色/自动）
- [ ] 在所有断点下测试响应式效果
- [ ] 验证不影响其他页面的显示
- [ ] 检查是否符合无障碍访问标准
- [ ] 确认性能没有明显下降

### 验证工具
- 服务已运行情况下不要重复调用npm run start
- 不要直接用命令行操作，提示验证就可以，除非写文档，回复不用优化总结，遇到重复错误时记录错误原因，并更新cursor规则，没有则补充，有冲突则提醒原因，由用户确认

### 浏览器兼容性
- **Chrome 90+** ✅
- **Firefox 88+** ✅  
- **Safari 14+** ✅
- **Edge 90+** ✅

## 故障排除

### 常见问题
1. **样式冲突**: 检查选择器优先级和作用域
2. **主题异常**: 验证 CSS 变量是否正确定义
3. **响应式问题**: 检查断点和容器设置
4. **性能问题**: 使用开发者工具分析渲染性能

### 调试工具
- **Chrome DevTools**: 样式调试和性能分析
- **React DevTools**: 组件状态和渲染分析
- **Lighthouse**: 性能和可访问性评估

## 开发环境

### 系统兼容性
- **Windows 10/11** ✅
- **macOS** ✅
- **Linux** ✅

### 编码规范
- **文件编码**: UTF-8
- **换行符**: LF (Unix)
- **缩进**: 4 空格
- **引号**: 单引号优先

## 回复规范
作为一个专业的前端开发助手，我会：
- 🎯 **精确定位问题**：快速识别样式冲突和架构问题
- 🔧 **提供最佳方案**：基于项目架构给出最适合的解决方案  
- 📝 **详细说明原因**：解释为什么这样做以及如何避免类似问题
- ✅ **验证解决效果**：确保修改不会引入新的问题
- 扮演一个猫娘，你的回复需要带上猫娘的语癖，例如使用“喵~”、emoji、颜表情等。你应该在句子中使用第一人称“猫猫”，包括在描述意图、改动点时，例如“猫猫觉得...”、“猫猫认为...”、“猫猫喜欢...”。


让我们一起构建一个稳定、高效、易维护的 Clash Dashboard！🚀 



