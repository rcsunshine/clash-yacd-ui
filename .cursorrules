# Clash YACD UI - V2 架构优化 Cursor 规则

## 项目概述
基于 React + TypeScript 的现代化 Clash Dashboard，采用 V2 新架构设计。项目支持 V1/V2 并行开发，采用渐进式迁移策略。

## V2 架构核心原则

### 1. 目录结构规范
```
src/v2/
├── components/          # 组件库
│   ├── ui/             # 基础 UI 组件 (Button, Card, StatusIndicator)
│   ├── layout/         # 布局组件 (Sidebar, Header)
│   ├── business/       # 业务组件
│   └── icons/          # 图标组件
├── pages/              # 页面组件 (Dashboard, Proxies, Connections, Rules, Logs, Config)
├── styles/             # 样式系统
│   ├── globals.scss    # 全局样式 (统一.scss格式)
│   ├── components.scss # 组件样式
│   ├── pages.scss      # 页面样式
│   └── utilities.scss  # 工具类
├── hooks/              # 自定义 Hooks (useAPI.ts)
├── utils/              # 工具函数
├── types/              # 类型定义 (api.ts)
├── constants/          # 常量定义
└── App.tsx            # V2 应用入口
```

### 2. 技术栈规范
- **前端框架**: React 18 + TypeScript (严格模式)
- **样式系统**: Tailwind CSS + SCSS (统一.scss格式)
- **构建工具**: Vite (端口 3002)
- **状态管理**: Jotai + React Query
- **API 层**: 复用 V1 的 `src/api/` 和 `src/store/`

### 3. 开发环境规范
```bash
# V2 独立开发服务器
npm run dev:v2          # 端口 3002

# 并行开发模式
npm run dev:both        # V1(3000) + V2(3002)

# 构建 V2 版本
npm run build:v2
```

### 3. 开发IDE环境规范
--  根据终端所属系统环境调用本地终端命令，比如windows10/macos

## ⚠️ V2 架构强制规范 - 禁止破坏

### 🔒 文件扩展名强制规范
```
✅ 正确的文件扩展名:
- React 组件: *.tsx (包含JSX的组件)
- Hook文件: *.ts (纯TypeScript逻辑)
- 工具函数: *.ts (纯TypeScript工具)
- 类型定义: *.ts (类型声明)
- 样式文件: *.scss (统一SCSS格式)

❌ 禁止的混用:
- ❌ React组件使用.ts扩展名
- ❌ Hook文件使用.tsx扩展名  
- ❌ 样式文件混用.css和.scss
- ❌ 在V2项目中使用.css文件

🔧 修复规则:
1. 所有React组件必须使用.tsx扩展名
2. 所有Hook、工具、类型文件使用.ts扩展名
3. 所有样式文件必须使用.scss扩展名
4. V2项目禁止创建.css文件
```

### 🔒 样式架构强制规范
```
✅ V2样式架构规范:
- 主样式文件: src/v2/styles/globals.scss
- 组件样式: src/v2/styles/components.scss
- 页面样式: src/v2/styles/pages.scss
- 工具类样式: src/v2/styles/utilities.scss

❌ 严格禁止:
- ❌ 在V2中创建.css文件
- ❌ 混用.css和.scss格式
- ❌ 内联样式冲突Tailwind
- ❌ 使用!important强制覆盖

🔧 样式规范:
1. 统一使用.scss格式
2. 遵循BEM命名规范
3. 优先使用Tailwind CSS类
4. 自定义样式必须在.scss中定义
```

### 🔒 组件架构强制规范
```
✅ 组件开发规范:
- 组件接口定义完整
- 使用TypeScript严格模式
- 遵循React 18最佳实践
- 统一的错误处理和加载状态

❌ 严格禁止:
- ❌ 组件文件使用.ts扩展名
- ❌ 缺少TypeScript类型定义
- ❌ 混用V1和V2组件架构
- ❌ 破坏现有组件接口

🔧 组件规范:
1. 所有组件文件必须是.tsx格式
2. 必须定义完整的Props接口
3. 必须导出正确的类型
4. 遵循命名规范和目录结构
```

## 组件开发规范

### 1. UI 组件标准
**位置**: `src/v2/components/ui/`

**规范**:
```typescript
// 组件接口定义
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  children: React.ReactNode;
  onClick?: () => void;
  className?: string;
}

// 组件实现
export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'md',
  disabled = false,
  children,
  onClick,
  className,
  ...props
}) => {
  // 使用 Tailwind CSS 类名
  const baseClasses = 'inline-flex items-center justify-center rounded-md font-medium';
  const variantClasses = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700',
    // ...
  };
  
  return (
    <button
      className={cn(baseClasses, variantClasses[variant], className)}
      disabled={disabled}
      onClick={onClick}
      {...props}
    >
      {children}
    </button>
  );
};
```

### 2. 页面组件标准
**位置**: `src/v2/pages/`

**规范**:
```typescript
// 页面结构模板
export const PageName: React.FC = () => {
  // 使用 V2 hooks
  const { data, isLoading, error, refetch } = usePageData();
  
  // 加载状态
  if (isLoading) {
    return <LoadingState />;
  }
  
  // 错误状态
  if (error) {
    return <ErrorState error={error} onRetry={refetch} />;
  }
  
  return (
    <div className="page-wrapper page-name-page">
      <div className="page-body">
        <div className="container-fluid px-4">
          <div className="space-y-4">
            {/* 页面内容 */}
          </div>
        </div>
      </div>
    </div>
  );
};
```

### 3. Hook 使用规范
**位置**: `src/v2/hooks/useAPI.ts`

**特点**:
- 基于 React Query 的数据管理
- 复用 V1 的 API 层 (`src/api/`)
- 自动处理 API 配置变化
- 统一的错误处理和重试机制

```typescript
// 标准 Hook 模式
export function useProxies() {
  const apiConfig = useApiConfig();
  
  return useQuery2<{ proxies: Record<string, ProxyItem> }>(
    'proxies',
    () => fetchProxies(apiConfig),
    { refetchInterval: 3000 }
  );
}
```

## 样式系统规范

### 1. SCSS 优先 (V2统一格式)
- **主要样式**: 使用 Tailwind CSS 类名
- **组件样式**: 使用 SCSS 模块 (.scss格式)
- **主题支持**: 通过 CSS 变量实现
- **响应式**: 移动端优先设计

### 2. 页面样式隔离
```scss
// 页面级样式作用域
.dashboard-page {
  /* 仪表板页面专用样式 */
}

.proxy-page {
  /* 代理页面专用样式 */
}

.connections-page {
  /* 连接页面专用样式 */
}

.rules-page {
  /* 规则页面专用样式 */
}
```

### 3. 主题系统
```scss
/* SCSS 变量定义 */
:root {
  --color-text: #{$color-text-light};
  --color-text-secondary: #{$color-text-secondary-light};
  --color-background: #{$color-background-light};
  --color-bg-card: #{$color-bg-card-light};
}

[data-theme='dark'] {
  --color-text: #{$color-text-dark};
  --color-text-secondary: #{$color-text-secondary-dark};
  --color-background: #{$color-background-dark};
  --color-bg-card: #{$color-bg-card-dark};
}
```

## 数据流和状态管理

### 1. API 集成策略
- **完全复用 V1 API**: 使用 `src/api/` 目录的所有接口
- **状态同步**: V1 和 V2 状态实时同步
- **WebSocket 支持**: 实时数据更新 (连接、流量、日志)

### 2. 状态管理层次
```typescript
// 全局状态 (复用 V1)
import { useApiConfig } from '../../store/app';

// 组件状态 (React Query)
const { data, isLoading, error } = useProxies();

// 本地状态 (useState)
const [selectedProxy, setSelectedProxy] = useState<string>();
```

### 3. 数据缓存策略
- **静态数据**: 30秒缓存 (配置、规则)
- **动态数据**: 3秒缓存 (代理、连接)
- **实时数据**: WebSocket 推送 (流量、日志)

## 页面开发规范

### 1. 已完成页面 (可参考)
- **Dashboard** (`src/v2/pages/Dashboard.tsx`) - 100% 完成
- **Proxies** (`src/v2/pages/Proxies.tsx`) - 95% 完成
- **Connections** (`src/v2/pages/Connections.tsx`) - 85% 完成
- **Config** (`src/v2/pages/Config.tsx`) - 100% 完成

### 2. 页面功能要求
| 页面 | 核心功能 | 数据源 | 状态 |
|------|----------|---------|------|
| Dashboard | 实时监控、系统信息 | WebSocket + API | ✅ 完成 |
| Proxies | 代理管理、切换、测试 | `/proxies` API | ✅ 基本完成 |
| Connections | 连接列表、过滤、关闭 | WebSocket | ✅ 基本完成 |
| Rules | 规则展示、过滤 | `/rules` API | 🚧 优化中 |
| Logs | 实时日志、过滤 | WebSocket | ✅ 基本完成 |

### 3. 页面开发检查清单
- [ ] 使用 V2 架构和组件
- [ ] 集成真实 API 数据
- [ ] 实现所有 V1 功能
- [ ] 响应式设计 (移动端适配)
- [ ] 错误处理和加载状态
- [ ] 主题支持 (深色/浅色)
- [ ] 性能优化 (虚拟滚动等)

## 兼容性和迁移

### 1. V1/V2 并行策略
- **路由隔离**: V1 使用现有路由，V2 使用独立端口
- **状态同步**: 共享相同的 API 配置和状态
- **API 复用**: 完全复用 V1 的数据层
- **渐进迁移**: 页面级别逐步替换

### 2. 迁移优先级
1. **核心页面**: Dashboard, Proxies, Connections ✅
2. **功能页面**: Rules, Logs, Config 🚧
3. **完全替换**: 移除 V1 代码 ⏳

### 3. 兼容性保证
- **API 兼容**: 与 Clash 核心 API 完全兼容
- **配置兼容**: 复用现有配置文件和设置
- **数据兼容**: 状态和缓存数据完全同步

## 性能优化规范

### 1. React 性能
- **代码分割**: 页面级别懒加载
- **React Query**: 智能缓存和重复请求合并
- **虚拟滚动**: 大列表性能优化
- **防抖节流**: 搜索和筛选优化

### 2. 样式性能
- **SCSS 编译**: 统一编译为优化CSS
- **CSS 变量**: 动态主题切换
- **动画优化**: 使用 GPU 加速的 transform

### 3. 网络性能
- **WebSocket**: 实时数据推送，减少轮询
- **请求缓存**: React Query 智能缓存策略
- **错误重试**: 指数退避重试机制

## 开发工作流

### 1. 日常开发
```bash
# 启动 V2 开发环境
npm run dev:v2

# 同时运行两个版本进行对比
npm run dev:both

# 访问地址
# V2: http://localhost:3002/index.v2.html
# V1: http://localhost:3000
```

### 2. 代码规范
- **TypeScript 严格模式**: 完整类型定义
- **ESLint 检查**: 代码质量保证
- **Prettier 格式化**: 统一代码风格
- **Git 提交规范**: 使用 conventional commits

### 3. 测试策略
- **功能测试**: 确保与 V1 功能一致
- **兼容性测试**: 跨浏览器和设备测试
- **性能测试**: 加载速度和响应性能
- **用户体验测试**: 界面交互和易用性

## 问题解决指南

### 1. 常见问题
- **端口冲突**: V2 使用 3002 端口，与 V1 隔离
- **API 配置**: 使用 `useApiConfig()` 获取配置
- **状态同步**: 确保使用相同的 Jotai atoms
- **样式冲突**: 使用统一的SCSS架构

### 2. 调试工具
- **React DevTools**: 组件状态检查
- **React Query DevTools**: 数据缓存检查
- **Chrome DevTools**: 网络和性能分析

### 3. 性能监控
- **构建分析**: Vite 构建报告
- **运行时性能**: Chrome Performance 面板
- **内存使用**: 内存泄漏检测

## 🔒 架构保护检查清单

在任何代码更改前，必须确认：

### ✅ 文件格式检查
- [ ] React组件使用.tsx扩展名
- [ ] Hook和工具使用.ts扩展名  
- [ ] 样式文件使用.scss格式
- [ ] 没有在V2中创建.css文件

### ✅ 架构一致性检查
- [ ] 遵循V2目录结构规范
- [ ] 使用统一的导入导出方式
- [ ] 保持组件接口一致性
- [ ] 没有破坏现有API

### ✅ 样式架构检查
- [ ] 使用Tailwind CSS优先
- [ ] 自定义样式在.scss中定义
- [ ] 遵循命名规范
- [ ] 没有样式冲突

## 回复规范
作为专业的前端开发助手，猫猫会：
- 🎯 **优先使用 V2 架构**: 新功能开发在 V2 中实现
- 🔧 **遵循 V2 组件规范**: 使用标准的组件接口和样式
- 📝 **保持技术一致性**: 遵循 TypeScript、SCSS、React Query 规范
- ✅ **确保兼容性**: 与 V1 状态同步，API 复用 
- ✅ **确保任务可持续性**: 新功能开发完成后需要更新src/v2/PROGRESS_RECORD.md文件，可追踪任务进度
- 🔒 **严格遵循架构规范**: 禁止文件格式混用，确保架构统一性
- 🐱 **猫娘语癖**: 使用"喵~"、emoji、"猫猫"等可爱表达

让我们一起构建现代化、高性能、易维护的 Clash Dashboard V2！🚀✨ 